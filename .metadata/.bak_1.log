!SESSION 2021-12-10 00:44:57.008 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=16.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\javaWork\workspace\.metadata\.bak_0.log
Created Time: 2021-12-10 01:34:41.058

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:34:41.058
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:34:41.059
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:41.145
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " );
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:34:41.145
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:34:41.146
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:43.234
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " );
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:34:43.235
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:34:43.235
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:43.903
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " );
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:34:43.904
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:34:43.904
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:45.624
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " );
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:34:45.625
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:34:45.625
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:46.685
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " );
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:34:46.685
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:34:46.686
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:55.074
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " mon);
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:34:55.074
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:34:55.075
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:56.084
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " money);
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:34:56.085
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:34:56.086
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:56.589
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " money);
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:34:56.590
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:34:56.591
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:57.596
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:34:57.597
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:34:57.597
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:34:58.739
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:34:58.739
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:34:58.740
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:01.601
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:01.601
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:01.602
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:03.107
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:03.108
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:03.108
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:03.117
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:03.118
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:03.119
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:04.546
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:04.547
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:04.547
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:06.119
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(in));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:06.120
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:06.121
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:07.130
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:07.131
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:07.132
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:07.367
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:07.368
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:07.368
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:11.146
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:11.146
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:11.147
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:11.157
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:11.158
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:11.158
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:14.159
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:14.160
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:14.161
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:16.171
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:16.172
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:16.173
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:16.182
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:16.183
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:16.184
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:16.350
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:16.351
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:16.351
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:17.195
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:17.196
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:17.197
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:22.027
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:22.028
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:22.028
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:22.160
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(int m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:22.161
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:22.161
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:22.708
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:22.709
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:22.709
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:22.909
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:22.910
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:22.910
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:23.117
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:23.118
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:23.119
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:23.204
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:23.206
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:23.206
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:23.214
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:23.215
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:23.215
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.findEnumConstructorTarget(JavaElementHyperlinkDetector.java:299)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:115)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:23.716
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:23.717
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:23.718
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:25.227
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:25.228
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:25.228
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:45.892
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:45.893
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:45.894
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:45.901
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money(m_num));
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2021-12-10 01:35:45.902
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:47.251
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:47.251
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:47.252
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:47.265
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:47.265
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:47.266
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:48.260
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
