!SESSION 2021-12-10 00:44:57.008 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=16.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\javaWork\workspace\.metadata\.bak_1.log
Created Time: 2021-12-10 01:35:48.261

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:35:48.262
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:35:48.264
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:50.749
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:50.750
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:50.750
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:50.764
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:50.765
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:50.766
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:50.772
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2021-12-10 01:35:50.773
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:52.516
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:52.517
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:52.518
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:52.527
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:52.528
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:52.529
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:35:53.059
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:35:53.060
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:35:53.060
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:04.098
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:04.099
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:04.099
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:04.843
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:04.844
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:04.845
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:04.856
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:04.857
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:04.857
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:07.885
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:07.885
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:07.886
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:12.119
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:12.120
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:12.121
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:14.580
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:14.581
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:14.581
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:15.245
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:15.245
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:15.246
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:25.297
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			main에서 ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 01:36:25.298
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 01:36:25.298
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:25.463
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			main에서 ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:25.464
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:25.465
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 01:36:27.310
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package kr.s00.miniproject;

import java.sql.Connection;  
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class Room3DAO {
   
   
   //회원가입
   public void insertMember(Member3VO member) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "INSERT INTO member3(m_num, m_id, m_passwd, m_name, m_phone) "
               + " VALUES(member3_seq.nextval, ?, ?, ?, ?)";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, member.getM_id());
         pstmt.setString(2, member.getM_passwd());
         pstmt.setString(3, member.getM_name());
         pstmt.setString(4, member.getM_phone());
         
         //4
         pstmt.executeUpdate();
         System.out.println(member.getM_name()+ "님의 회원가입이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);         
      }
   }
   
   //로그인체크 : 로그인 체크 후 로그인이 가능하면 회원번호 반환
   public int loginCheck(String m_id, String m_passwd) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int m_num = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_num FROM member3 WHERE m_id=? AND m_passwd=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         pstmt.setString(2, m_passwd);
         
         //4
         rs=pstmt.executeQuery();
         if(rs.next()) {
            m_num=rs.getInt(1);
         }   
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return m_num;
   }
   
   
   //아이디 중복체크
   public int checkId(String m_id) {
      Connection conn=null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT m_id FROM member3 WHERE m_id=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, m_id);
         
         //4
         rs = pstmt.executeQuery();
         if(rs.next()) {
            count = 1;      //아이디존재O : count1 / 아이디존재X : COUNT0
         }      
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
      return count;
   }
   
   
   //회원목록
   public void selectListMember() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      ResultSet rs = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "SELECT * FROM member3 ORDER BY m_num DESC";
         pstmt = conn.prepareStatement(sql);
         
         //4      
         rs = pstmt.executeQuery();
         
         System.out.println("---------------------------------------------------");
         System.out.println("회원번호\tID\tPW\t이름\t전화번호\t가입일");
         System.out.println("---------------------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("m_num") + "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.print(rs.getString("m_passwd") + "\t");
            System.out.print(rs.getString("m_name") + "\t");
            System.out.print(rs.getString("m_phone") + "\t");
            System.out.println(rs.getDate("m_regdate") + "\t");
         }
         System.out.println("---------------------------------------------------");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
//************************************************************************************************
   
   //숙소정보 추가하기
   public void insertRoom(Room3VO room) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "INSERT INTO room3 (ro_num, ro_name, ro_amount) VALUES(room3_seq.nextval,?,?)";
         
         pstmt = conn.prepareStatement(sql);
         
         pstmt.setString(1, room.getRo_name());
         pstmt.setInt(2, room.getRo_amount());
         
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 행이 추가되었습니다.");
      }
      catch(Exception e) {
         e.printStackTrace();
      }
      finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   //숙소정보 수정
   public void updateRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "UPDATE room3 SET ro_name =?, ro_amount=? WHERE ro_num=?  ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setString(1, room3.getRo_name());
         pstmt.setInt(2, room3.getRo_amount());
         pstmt.setInt(3, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 숙소정보가 수정되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally{
         DBUtil.executeClose(null, pstmt, conn);
      }   
   }
   
   
   
   //숙소정보 삭제
   public void deleteRoom(Room3VO room3) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3
         sql = "DELETE FROM room3 WHERE ro_num = ?";
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, room3.getRo_num());
         
         //4
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실 정보가 삭제되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
    
   
   
   //숙소 목록
   public void selectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT * FROM room3 ORDER BY ro_num DESC";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("-------------------------------------");
         System.out.println("객실번호\t객실명\t예약금액\t");
         System.out.println("-------------------------------------");
         
         while(rs.next()) {
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.println(rs.getInt("ro_amount")+"\t");
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
 
   
   //예약자이름 안보이는 숙소 목록
   public void privateselectListRoom() {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs= null;
      String sql = null;
      
      try {
         conn = DBUtil.getConnection();
         
         sql = "SELECT ro_num, ro_name, ro_amount, re_num, re_status, re_checkin, re_checkout "
               + "FROM room3 LEFT OUTER JOIN (SELECT * FROM reserv3 WHERE re_status=1) USING(ro_num) ORDER BY re_status";
         
         pstmt = conn.prepareStatement(sql);
         
         rs = pstmt.executeQuery();
         
         System.out.println("------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜");
         System.out.println("------------------------------------------------------------------------------------");
         
         while(rs.next()) {
        	 System.out.print(rs.getInt("re_num")+"\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name")+"\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));
            if(rs.getInt("re_status")==1) {
               System.out.print("예약불가\t\t");
            }else {
               System.out.print("예약가능\t\t");
            }
            System.out.print(rs.getString("re_checkin")+"\t");
            System.out.println(rs.getString("re_checkout")+"\t");
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
  
   
   //객실정보 & 예약현황 보기
   public void detailselectListRoom() {
         Connection conn = null;
         PreparedStatement pstmt = null;
         ResultSet rs= null;
         String sql = null;
         
         try {
            conn = DBUtil.getConnection();
            
            sql = "SELECT ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
                  + "FROM room3 LEFT OUTER JOIN reserv3 USING(ro_num) LEFT OUTER JOIN member3 USING(m_num) ORDER BY re_status";

            
            pstmt = conn.prepareStatement(sql);
            
            rs = pstmt.executeQuery();
            
            System.out.println("-------------------------------------------------------------------------------------------");
            System.out.println("객실번호\t객실명\t객실예약금액\t예약가능여부\t예약자\t예약자ID\t체크인날짜\t\t체크아웃날짜");
            System.out.println("-------------------------------------------------------------------------------------------");
            
            while(rs.next()) {
               System.out.print(rs.getInt("ro_num")+"\t");
               System.out.print(rs.getString("ro_name")+"\t");
               System.out.print(rs.getInt("ro_amount")+"\t\t");
               if(rs.getInt("re_status")==1) {
                  System.out.print("예약불가\t\t");
               }else {
                  System.out.print("예약가능\t\t");
               }
               System.out.print(rs.getString("m_name")+"\t");
               System.out.print(rs.getString("m_id")+"\t");
               System.out.print(rs.getString("re_checkin")+"\t");
               System.out.println(rs.getString("re_checkout")+"\t");   
            }
         }catch(Exception e) {
            e.printStackTrace();
         }finally {
            DBUtil.executeClose(rs, pstmt, conn);
         }
      }
       
   
   
   //객실예약
   public void insertReservation(Reserv3VO reservation) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         //3
         sql = "INSERT INTO reserv3(re_num, re_status, ro_num, m_num, re_checkin, re_checkout) "
               + " VALUES(reserv3_seq.nextval, 1, ?, ?, ?, ?)";   //예약하면 status 1로 처리
         
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, reservation.getRo_num());
         pstmt.setInt(2, reservation.getM_num());
         pstmt.setString(3, reservation.getRe_checkin());
         pstmt.setString(4, reservation.getRe_checkout());
               
         //4
         pstmt.executeUpdate();
         System.out.println(reservation.getM_num()+"님의 객실 예약이 완료되었습니다.");
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //MY예약현황 목록 보기
   public void selectMylist(int m_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      
      try {
         //JDBC 수행 1,2단계
         conn = DBUtil.getConnection();
         //SQL문 작성
         sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
               + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
         //JDBC 수행 3단계 : PreparedStatement 객체 생성
         pstmt = conn.prepareStatement(sql);
         //?에 데이터 바인딩
         pstmt.setInt(1, m_num);
         //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
         //             ResultSet에 담고 반환
         rs = pstmt.executeQuery();
         System.out.println("--------------------------------------------------------------------------------------------------------");
         System.out.println("예약번호\t객실번호\t객실명\t예약금액\t\t예약가능여부\t체크인날짜\t\t체크아웃날짜\t예약자ID\t예약자");
         System.out.println("---------------------------------------------------------------------------------------------------------");
         while(rs.next()) {
            System.out.print(rs.getInt("re_num") + "\t");
            System.out.print(rs.getInt("ro_num")+"\t");
            System.out.print(rs.getString("ro_name") + "\t");
            System.out.printf("%,d\t\t",rs.getInt("ro_amount"));            
            if(rs.getInt("re_status") == 0) {
               System.out.print("예약 취소\t");
            }else {
               System.out.print("예약 중\t");
            }
            
            System.out.print(rs.getString("re_checkin")+ "\t\t");
            System.out.print(rs.getString("re_checkout")+ "\t");
            System.out.print(rs.getString("m_id") + "\t");
            System.out.println(rs.getString("m_name"));
            System.out.println("예약금: " + money());
            
         }
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         //자원정리 
         DBUtil.executeClose(rs, pstmt, conn);
      }
   }
   
///////////////////
   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
 	  Connection conn = null;
 	  PreparedStatement pstmt = null;
 	  ResultSet rs = null;
 	  String sql = null;
 	    int count = 0;
         sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
         pstmt = conn.prepareStatement(sql);		
         pstmt.setInt(1, m_num);
         rs = pstmt.executeQuery();
         if(rs.next()) {
         	count = rs.getInt(1);
         }else {
         	count=2;
         }
          			main에서 ro_amount*0.8
          }catch(Exception e) {
              e.printStackTrace();
           }finally {
              DBUtil.executeClose(rs, pstmt, conn);
           }   
           return count;
        }
////////////////////
   
   
   
   //예약취소 및 반납처리 메서드
   public void updateReservation(int re_num) {
      System.out.println("예약 번호 : " + re_num);
      Connection conn = null;
      PreparedStatement pstmt = null;
      String sql = null;
      
      
      try {
         //1,2
         conn = DBUtil.getConnection();
         
         //3   //m_num도 바꿔야하는거 아닌가 ?? nono. \변경된 처리내역을 봐야하기때문에 이건 안바꿔도 된다.
         sql = "UPDATE reserv3 SET re_status=0, re_checkin='-', re_checkout='-' WHERE re_num=?";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, re_num);
         
         //4  
         int count = pstmt.executeUpdate();
         System.out.println(count + "개의 객실을 반납하였습니다.");  

      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(null, pstmt, conn);
      }
   }
   
   
   
 //숙소 중복 방지(status가 1이 아니어야함) = status 1이 아닌지 확인.//예약시
   public int getStatusReservation(int ro_num) {
      Connection conn = null;
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      String sql = null;
      int count = 0;
      
      try {
         //1,2
         conn = DBUtil.getConnection();
               
         //3
         sql = "SELECT re_status FROM reserv3 WHERE ro_num=? ";
         pstmt = conn.prepareStatement(sql);
         pstmt.setInt(1, ro_num);
            
         //4
            rs = pstmt.executeQuery();
          if(rs.next()) {
               count = rs.getInt(1);   //1이 출력되면 사용불가
            }else {
               count=-1;   //-1이 나오면 사용가능
            }
         
      }catch(Exception e) {
         e.printStackTrace();
      }finally {
         DBUtil.executeClose(rs, pstmt, conn);
      }   
      return count;
   }
    
//숙소 반납 여부 체크 //취소.반납시
   public int getStatusBack(int ro_num, int m_num) {
     Connection conn = null;
     PreparedStatement pstmt = null;
     ResultSet rs = null;
      String sql = null;
      int count = 0;
            
     try {
        //1,2
        conn = DBUtil.getConnection();
        sql = "SELECT re_status FROM reserv3 WHERE re_num=? AND m_num=?";
        //3
        pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, ro_num);
        pstmt.setInt(2, m_num);
        //4
          rs = pstmt.executeQuery();
        if(rs.next()) {
           count = rs.getInt(1);   //1은 컬럼 인덱스(re_status)
        }else {
           count= -1;   //행이없는 경우 룸넘버가 없을 때
        }
     }catch(Exception e) {
        e.printStackTrace();
     }finally {
        DBUtil.executeClose(rs, pstmt, conn);
     }   
        return count;
   }
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 01:36:27.311
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 01:36:27.312
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 13:40:56.189
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 13:40:56.190
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 13:40:56.191
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 13:40:56.263
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 13:40:56.263
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 13:40:56.264
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 13:40:57.668
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 13:40:57.668
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 13:40:57.669
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 13:41:00.698
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-12-10 13:41:00.699
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-12-10 13:41:00.699
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:501)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 13:44:37.571
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 13:44:37.572
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 13:44:37.572
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 13:53:32.748
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 13:53:32.749
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 13:53:32.749
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 13:53:37.713
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 13:53:37.714
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 13:53:37.714
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 13:54:17.653
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 13:54:17.654
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 13:54:17.654
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-12-10 16:05:35.820
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package ch12;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import kr.s03.preparedstatement.DBUtil;

public class test02 {

   public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	      Connection conn = null;
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      String sql = null;
	      int count = 0;
	      
	      try {
	          //JDBC 수행 1,2단계
	          conn = DBUtil.getConnection();
	          //SQL문 작성
	          sql = "SELECT re_num, ro_num, ro_name, ro_amount, re_status, m_name, m_id, re_checkin, re_checkout "
	                + "FROM room3 JOIN reserv3 USING(ro_num) JOIN member3 USING(m_num) WHERE m_num=? ORDER BY re_num DESC";
	          //JDBC 수행 3단계 : PreparedStatement 객체 생성
	          pstmt = conn.prepareStatement(sql);
	          //?에 데이터 바인딩
	          pstmt.setInt(1, m_num);
	          //JDBC 수행 4단계 : SQL문을 수행해서 테이블로부터 결과 집합을 얻어서 
	          //             ResultSet에 담고 반환
	          rs = pstmt.executeQuery();
	                      
	      public void money(int m_num) { //예약자가 예약을 2개이상했으면 메인에서 *0.8
	    	  Connection conn = null;
	    	  PreparedStatement pstmt = null;
	    	  ResultSet rs = null;
	    	  String sql = null;
	    	    int count = 0;
	            sql = "SELECT COUNT(re_status) FROM reserv3 WHERE=?";
	            pstmt = conn.prepareStatement(sql);		
	            pstmt.setInt(1, m_num);
	            rs = pstmt.executeQuery();
	            if(rs.next()) {
	            	count = rs.getInt(1);
	            }else {
	            	count=2;
	            }
	             			ro_amount*0.8
	             }catch(Exception e) {
	                 e.printStackTrace();
	              }finally {
	                 DBUtil.executeClose(rs, pstmt, conn);
	              }   
	              return count;
	           }
	    
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-12-10 16:05:35.821
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-12-10 16:05:35.821
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2021-12-11 18:47:53.331 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=16.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2021-12-11 18:48:13.397
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-12-11 18:48:13.397
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@718e700c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5b5e45bc,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2021-12-11 18:48:18.103
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\heominjeong'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.navigator 2 0 2021-12-11 18:48:32.887
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2021-12-11 18:48:32.888
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering
!SESSION 2021-12-19 17:58:20.079 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=16.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2021-12-19 18:17:06.557
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2021-12-19 18:17:06.557
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5e405eaf,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4981b83,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.ui.navigator 2 0 2021-12-19 18:17:13.233
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2021-12-19 18:17:13.235
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2021-12-19 18:17:13.269
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\heominjeong'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
